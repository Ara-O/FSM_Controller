function launchFileGenerator_mb(launchname,worldname, foldName, num_robots,num_tasks, num_regions, num_scenarios, robots_loc)
% Generates a launch file for use in ROS. Opens a stage world, navigation,
% and path planning nodes.
%   call: launchFileGenerator(launchname,worldname,foldName,num_robots)
% Variables requred for the launchfile generation:
%   launchname - the desired name for the launch file (with .launch)
%   worldname - the name of the world file (with .world)
%   foldName - name of folder to store launch file (with .fsm or .xxx)
%   num_robots - number of robots

%% Variables and file open
% remove .fsm

if contains(foldName, ".fsm")
    foldName = foldName(1:end-4);
end

robotsFileName = cellstr(["robots" num2str(num_tasks) num2str(num_regions) num2str(num_robots) num2str(str2num(num_scenarios), "%02d") ".launch"]);
robotsFileName = strrep(join(robotsFileName), " ", "");
% open file in: ../FSMs/fsmFileNameFolder/launchFileName
launchname = [launchname(1:end-7),'_mb.launch.py'];  % Take off '.launch', add _mb.launch
%lo = fopen(['../FSMs/' foldName '/' launchname],'w');
lo = fopen(['../FSMs/' foldName '/' launchname],'w');

% open path folder (FOR TESTING)
% lo = fopen(launchname, 'w');

fprintf(lo, 'import os\n');
fprintf(lo, 'from launch import LaunchDescription\n');
fprintf(lo, 'from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription\n');
fprintf(lo, 'from launch.substitutions import LaunchConfiguration\n');
fprintf(lo, 'from launch.launch_description_sources import PythonLaunchDescriptionSource\n');
fprintf(lo, 'from ament_index_python.packages import get_package_share_directory\n\n');

fprintf(lo, 'def generate_launch_description():\n');
fprintf(lo, '    # Path to default world file\n');
fprintf(lo, '    default_world_file = os.path.join(get_package_share_directory(\'udm_pioneer_p3dx\'), \'p3dx_navigation\', \'maps\', \'%s\')\n\n', worldname);

fprintf(lo, '    # Declare the launch arguments\n');
fprintf(lo, '    declared_arguments = [\n');
fprintf(lo, '        DeclareLaunchArgument(\'paused\', default_value=\'false\', description=\'Start the simulation paused\'),\n');
fprintf(lo, '        DeclareLaunchArgument(\'world\', default_value=default_world_file, description=\'World file to launch the robots in\'),\n');
fprintf(lo, '        DeclareLaunchArgument(\'use_sim_time\', default_value=\'true\', description=\'Use simulation (Gazebo) clock\'),\n');
fprintf(lo, '        DeclareLaunchArgument(\'gui\', default_value=\'true\', description=\'Run with GUI\'),\n');
fprintf(lo, '        DeclareLaunchArgument(\'headless\', default_value=\'false\', description=\'Run headless (no GUI)\'),\n');
fprintf(lo, '        DeclareLaunchArgument(\'debug\', default_value=\'false\', description=\'Enable debug mode\'),\n');
fprintf(lo, '    ]\n\n');

fprintf(lo, '    # Path to the gazebo_ros launch file\n');
fprintf(lo, '    gazebo_ros_pkg = get_package_share_directory(\'gazebo_ros\')\n');
fprintf(lo, '    gazebo_launch_file = os.path.join(gazebo_ros_pkg, \'launch\', \'gazebo.launch.py\')\n\n');

fprintf(lo, '    # Include the Gazebo launch file\n');
fprintf(lo, '    start_gazebo = IncludeLaunchDescription(\n');
fprintf(lo, '        PythonLaunchDescriptionSource([gazebo_launch_file]),\n');
fprintf(lo, '        launch_arguments={\n');
fprintf(lo, "            'world': LaunchConfiguration(\'world\'),\n');
fprintf(lo, "            'paused': LaunchConfiguration(\'paused\'),\n');
fprintf(lo, "            'use_sim_time': LaunchConfiguration(\'use_sim_time\'),\n');
fprintf(lo, "            'gui': LaunchConfiguration(\'gui\'),\n');
fprintf(lo, "            'headless': LaunchConfiguration(\'headless\'),\n');
fprintf(lo, "            'debug': LaunchConfiguration(\'debug\'),\n');
fprintf(lo, '        }.items()\n');
fprintf(lo, '    )\n\n');

fprintf(lo, '    p3dx_robot_launch_file = os.path.join(get_package_share_directory(\'udm_pioneer_p3dx\'), \'p3dx_gazebo\', \'%s\')\n\n', robotsFileName{1});

fprintf(lo, '    robot = IncludeLaunchDescription(\n');
fprintf(lo, '        PythonLaunchDescriptionSource([p3dx_robot_launch_file])\n');
fprintf(lo, '    )\n\n');

fprintf(lo, '    return LaunchDescription(declared_arguments + [start_gazebo, robot])\n');

fclose(lo);

%Robots file
%robotsFileNameParsed = strcat('../FSMs/', foldName, '/', robotsFileName);
robotsFileNameParsed = strcat('../FSMs/', foldName, '/', robotsFileName);

robotsFile = fopen(robotsFileNameParsed,'w');


fprintf(robotsFile,'<launch>\n\n');

for i= 1:num_robots
    %Loop per robot
    fprintf(robotsFile,' <!-- BEGIN ROBOT %d -->\n', i);
    fprintf(robotsFile,'<group ns="robot%d">\n', i);
    fprintf(robotsFile,'<param name="tf_prefix" value="robot%d_tf" />\n', i);
    fprintf(robotsFile,'<include file="$(find p3dx_gazebo)/launch/one_robot.launch" >\n');
    fprintf(robotsFile,'<arg name="init_pose" value="-x %f -y %f -z 0.0" />\n', robots_loc{i, 1}, robots_loc{i, 2});
    fprintf(robotsFile,'<arg name="robot_name"  value="robot%d" /></include>\n', i);
    fprintf(robotsFile,'</group>\n');
end
    fprintf(robotsFile,'</launch>\n\n');
fclose(robotsFile);



